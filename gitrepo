package git


import (
	"bytes"
	"errors"
	"strings"
	"testing"


	"github.com/stretchr/testify/assert"
)


func TestRepository_Diff(t *testing.T) {
	tests := []struct {
		rev          string
		maxFiles     int
		maxFileLines int
		maxLineChars int
		opt          DiffOptions
		expDiff      *Diff
	}{
		{
			rev: "978fb7f6388b49b532fbef8b856681cfa6fcaa0a",
			expDiff: &Diff{
				Files: []*DiffFile{
					{
						Name:         "fix.txt",
						Type:         DiffFileDelete,
						Index:        "0000000000000000000000000000000000000000",
						OldIndex:     "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
						Sections:     nil,
						numAdditions: 0,
						numDeletions: 0,
						oldName:      "fix.txt",
						isBinary:     false,
						isSubmodule:  false,
						isIncomplete: false,
						mode:         0100644,
						oldMode:      0100644,
					},
				},
				totalAdditions: 0,
				totalDeletions: 0,
				isIncomplete:   false,
			},
		},
		{
			rev: "755fd577edcfd9209d0ac072eed3b022cbe4d39b",
			expDiff: &Diff{
				Files: []*DiffFile{
					{
						Name:     "README.txt",
						Type:     DiffFileAdd,
						Index:    "1e24b564bf2298965d8037af42d3ae15ad7d225a",
						OldIndex: "0000000000000000000000000000000000000000",
						Sections: []*DiffSection{
							{
								Lines: []*DiffLine{
									{
										Type:    DiffLineSection,
										Content: "@@ -0,0 +1,11 @@",
									},
									{
										Type:      DiffLineAdd,
										Content:   "+This is a sample project students can use during Matthew's Git class.",
										LeftLine:  0,
										RightLine: 1,
									},
									{
										Type:      DiffLineAdd,
										Content:   "+",
										LeftLine:  0,
										RightLine: 2,
									},
									{
										Type:      DiffLineAdd,
										Content:   "+We can have a bit of fun with this repo, knowing that we can always reset it to a known good state.  We can apply labels, and branch, then add new code and merge it in to the master branch.",
										LeftLine:  0,
										RightLine: 3,
									},
									{
										Type:      DiffLineAdd,
										Content:   "+",
										LeftLine:  0,
										RightLine: 4,
									},
									{
										Type:      DiffLineAdd,
										Content:   "+As a quick reminder, this came from one of three locations in either SSH, Git, or HTTPS format:",
										LeftLine:  0,
										RightLine: 5,
									},
									{
										Type:      DiffLineAdd,
										Content:   "+",
										LeftLine:  0,
										RightLine: 6,
									},
									{
										Type:      DiffLineAdd,
										Content:   "+* git@github.com:matthewmccullough/hellogitworld.git",
										LeftLine:  0,
										RightLine: 7,
									},
									{
										Type:      DiffLineAdd,
										Content:   "+* git://github.com/matthewmccullough/hellogitworld.git",
										LeftLine:  0,
										RightLine: 8,
									},
									{
										Type:      DiffLineAdd,
										Content:   "+* https://matthewmccullough@github.com/matthewmccullough/hellogitworld.git",
										LeftLine:  0,
										RightLine: 9,
									},


index 0000000000000000000000000000000000000000..51680791956b43effdb2f16bccd2b4752d66078f
--- /dev/null
+++ b/src/Main.groovy
@@ -0,0 +1,6 @@
+def name = "Matthew"
+
+println "Hello ${name}"
+
+int programmingPoints = 10
+println "${name} has at least ${programmingPoints} programming points."
\ No newline at end of file
`,
		},
	}
	for _, test := range tests {
		t.Run("", func(t *testing.T) {
			buf := new(bytes.Buffer)
			err := testrepo.RawDiff(test.rev, test.diffType, buf, test.opt)
			if err != nil {
				t.Fatal(err)
			}
			output := buf.String()


			// Only check the content after "Date:" line, which is deterministic.
			i := strings.Index(output, "Date:")
			if i > 0 && test.diffType == RawDiffPatch {
				output = output[i:]
			}


			assert.Equal(t, test.expOutput, output)
		})
	}
}


